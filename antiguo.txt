    // ------------------------------------------------------------
    // 10) Construir ruta Manhattan, chequeando bloqueos
    // ------------------------------------------------------------
    public List<Point> buildManhattanPath(int x1, int y1, int x2, int y2, int tiempoInicial, ExecutionContext estado) {
        List<Point> path = new ArrayList<>();
        Point current = new Point(x1, y1);
        int t = tiempoInicial;

        while (current.x != x2 || current.y != y2) {
            Point prev = new Point(current.x, current.y);
            if      (current.x < x2) current.x++;
            else if (current.x > x2) current.x--;
            else if (current.y < y2) current.y++;
            else                      current.y--;

            Point next = new Point(current.x, current.y);
            int tiempoLlegada = t + 1;

            if (isBlockedMove(prev, next, tiempoLlegada, estado)) {
                // invocar A* si hay bloqueo
                List<Point> alt = findPathAStar(prev.x, prev.y, x2, y2, tiempoLlegada, estado);
                if (alt == null) {
                    throw new RuntimeException(
                            "No hay ruta hacia ("+x2+","+y2+") desde ("+x1+","+y1+") en t+"+tiempoInicial
                    );
                }
                path.addAll(alt);
                return path;
            }
            path.add(next);
            t = tiempoLlegada;
        }
        return path;
    }

    // ------------------------------------------------------------
    // 11) Verifica bloqueo en el tramo prev‚Üínext
    // ------------------------------------------------------------
    private boolean isBlockedMove(Point prev, Point next, int timeMin, ExecutionContext estado) {
        for (Bloqueo b : estado.getBloqueos()) {
            // 1) Solo bloqueos activos en este minuto
            if (!b.isActiveAt(timeMin)) continue;
            // 2) Si el punto "next" est√° en ese segmento bloqueado, lo bloquea
            if (b.estaBloqueado(timeMin, next)) {
                return true;
            }
        }
        return false;
    }

    // ------------------------------------------------------------
    // 12) A* considerando bloqueos din√°micos
    // ------------------------------------------------------------
    private static class Node implements Comparable<Node> {
        Point pt; int g, f; Node parent;
        Node(Point pt, int g, int f, Node p) { this.pt = pt; this.g = g; this.f = f; this.parent = p; }
        public int compareTo(Node o) { return Integer.compare(this.f, o.f); }
    }

    public List<Point> findPathAStar(int x1, int y1, int x2, int y2, int tiempo, ExecutionContext estado) {
        boolean[][] closed = new boolean[71][51];
        PriorityQueue<Node> open = new PriorityQueue<>();
        open.add(new Node(new Point(x1,y1), 0, manhattan(x1,y1,x2,y2), null));

        while (!open.isEmpty()) {
            Node curr = open.poll();
            int cx = curr.pt.x, cy = curr.pt.y;
            if (cx == x2 && cy == y2) {
                List<Point> ruta = new ArrayList<>();
                for (Node n = curr; n != null; n = n.parent) ruta.add(n.pt);
                Collections.reverse(ruta);
                ruta.remove(0);
                return ruta;
            }
            if (closed[cx][cy]) continue;
            closed[cx][cy] = true;

            for (int[] d : new int[][] {{1,0},{-1,0},{0,1},{0,-1}}) {
                int nx = cx + d[0], ny = cy + d[1];
                if (nx < 0 || nx >= 71 || ny < 0 || ny >= 51) continue;
                Point next = new Point(nx, ny);

                boolean bad = false;
                int tLleg = tiempo + curr.g + 1;
                for (Bloqueo b : estado.getBloqueos()) {
                    if (b.estaBloqueado(tLleg, next)) {
                        bad = true; break;
                    }
                }
                if (bad && !(nx == x2 && ny == y2)) continue;
                if (closed[nx][ny]) continue;

                int g2 = curr.g + 1;
                int f2 = g2 + manhattan(nx, ny, x2, y2);
                open.add(new Node(next, g2, f2, curr));
            }
        }
        return null; // o lanzar excepci√≥n
    }

    private int manhattan(int x1, int y1, int x2, int y2) {
        return Math.abs(x1 - x2) + Math.abs(y1 - y2);
    }

// ------------------------------------------------------------
    // 13) Un minuto de simulaci√≥n completo
    // ------------------------------------------------------------
    public int stepOneMinute(ExecutionContext estado) {
        // corregido
        int nuevoTiempo = estado.getCurrentTime() + 1;
        estado.setCurrentTime(nuevoTiempo);
        int tiempoActual = nuevoTiempo;
        boolean replanificar = (tiempoActual == 0);

        // 1) Recarga de tanques intermedios cada vez que currentTime % 1440 == 0 (inicio de d√≠a)
        if (tiempoActual > 0 && tiempoActual % 1440 == 0) {
            for (TanqueDinamico tq : estado.getTanques()) {
                tq.setDisponible(tq.getCapacidadTotal());
            }
            System.out.printf("üîÅ t+%d: Tanques recargados a %.1f m¬≥%n",
                    tiempoActual,
                    estado.getTanques().get(0).getCapacidadTotal());
        }

        // 2) Disparar eventos de entrega programados para este minuto
        Iterator<EntregaEvent> itEv = estado.getEventosEntrega().iterator();
        while (itEv.hasNext()) {
            EntregaEvent ev = itEv.next();
            if (ev.time == tiempoActual) {
                System.out.println("‚ñ∂‚ñ∂‚ñ∂ disparando eventoEntrega para Pedido " + ev.getPedido().getId());
                CamionEstado camion = findCamion(ev.getCamionId(), estado);
                double antes = camion.getCapacidadDisponible();
                camion.setX(ev.getPedido().getX());
                camion.setY(ev.getPedido().getY());
                camion.setTiempoLibre(tiempoActual + 15); // 15 min descarga

                double dispAntes = camion.getCapacidadDisponible();
                if (dispAntes >= ev.getPedido().getVolumen()) {
                    camion.setCapacidadDisponible(dispAntes - ev.getPedido().getVolumen());
                } else {
                    System.out.printf("‚ö†Ô∏è Pedido #%d *no* entregado: capacidad insuficiente (%.1f < %.1f)%n",
                            ev.getPedido().getId(), dispAntes, ev.getPedido().getVolumen());
                }
                ev.getPedido().setAtendido(true);
                System.out.printf(
                        "‚úÖ t+%d: Pedido #%d completado por Cami√≥n %s en (%d,%d); cap: %.1f‚Üí%.1f m¬≥%n",
                        tiempoActual, ev.getPedido().getId(), camion.getPlantilla().getId(),
                        ev.getPedido().getX(), ev.getPedido().getY(),
                        antes, camion.getCapacidadDisponible()
                );
                itEv.remove();

                // 3) Iniciar retorno
                double falta = camion.getPlantilla().getCapacidadCarga() - camion.getCapacidadDisponible();
                int sx = camion.getX(), sy = camion.getY();
                int dxPlant = estado.getDepositoX(), dyPlant = estado.getDepositoY();
                int distMin = Math.abs(sx - dxPlant) + Math.abs(sy - dyPlant);
                TanqueDinamico mejor = null;
                for (TanqueDinamico tq : estado.getTanques()) {
                    if (tq.getDisponible() >= falta) {
                        int dist = Math.abs(sx - tq.getPosX()) + Math.abs(sy - tq.getPosY());
                        if (dist < distMin) {
                            distMin = dist;
                            mejor = tq;
                        }
                    }
                }
                int destX = (mejor != null ? mejor.getPosX() : dxPlant);
                int destY = (mejor != null ? mejor.getPosY() : dyPlant);
                camion.setReabastecerEnTanque(mejor);

                if (mejor != null) {
                    mejor.setDisponible(mejor.getDisponible() - falta);
                    System.out.printf("üîÅ t+%d: Tanque (%d,%d) reservado %.1fm¬≥ ‚Üí ahora %.1f m¬≥%n",
                            tiempoActual, mejor.getPosX(), mejor.getPosY(), falta, mejor.getDisponible());
                }

                camion.setEnRetorno(true);
                camion.setStatus(CamionEstado.TruckStatus.RETURNING);
                camion.setRetHora(tiempoActual);
                camion.setRetStartX(sx);
                camion.setRetStartY(sy);
                camion.setRetDestX(destX);
                camion.setRetDestY(destY);

                List<Point> returnPath = buildManhattanPath(sx, sy, destX, destY, tiempoActual, estado);
                camion.setRuta(returnPath);
                camion.setPasoActual(0);
                camion.getHistory().addAll(returnPath);

                System.out.printf("‚è±Ô∏è t+%d: Cami√≥n %s inicia retorno a (%d,%d) dist=%d%n",
                        tiempoActual, camion.getPlantilla().getId(), destX, destY, distMin);
            }
        }
        // 4) Avanzar cada cami√≥n en ruta (ida o retorno) un paso
        for (CamionEstado c : estado.getCamiones()) {
            if (c.tienePasosPendientes()) {
                // Llamada a CamionService para que el cami√≥n avance UN paso en su rutaActual
                c.avanzarUnPaso();
                System.out.printf("‚Üí Cami√≥n %s avanza a (%d,%d)%n", c.getPlantilla().getId(), c.getX(), c.getY());
            } else if (c.getStatus() == CamionEstado.TruckStatus.RETURNING) {
                // l√≥gica de recarga autom√°tica al llegar a dep√≥sito (queda igual)
                //double falta = c.getCapacidad() - c.getDisponible();
                TanqueDinamico tq = c.getTanqueDestinoRecarga();
                if (tq != null) {
                    System.out.printf("üîÑ t+%d: Cami√≥n %s lleg√≥ a tanque (%d,%d) y recargado a %.1f m¬≥%n",
                            tiempoActual, c.getPlantilla().getId(), tq.getPosX(), tq.getPosY(), c.getCapacidadDisponible());
                    System.out.printf("üîÅ      Tanque (%d,%d) qued√≥ con %.1f m¬≥%n",
                            tq.getPosX(), tq.getPosY(), tq.getDisponible());
                } else {
                    System.out.printf("üîÑ t+%d: Cami√≥n %s lleg√≥ a planta (%d,%d) y recargado a %.1f m¬≥%n",
                            tiempoActual, c.getPlantilla().getId(), estado.getDepositoX(), estado.getDepositoY(), c.getCapacidadDisponible());
                }
                c.setCapacidadDisponible(c.getPlantilla().getCapacidadCarga());
                c.setCombustibleDisponible(c.getPlantilla().getCapacidadCombustible());
                c.setEnRetorno(false);
                c.setReabastecerEnTanque(null);
                c.setStatus(CamionEstado.TruckStatus.AVAILABLE);
                c.setTiempoLibre(tiempoActual + 15);
            }
        }


        // 5) Incorporar nuevos pedidos que llegan en este minuto
        List<Pedido> nuevos = estado.getPedidosPorTiempo().remove(tiempoActual);
        if (nuevos == null) {
            nuevos = Collections.emptyList();
        }

        // 5.a) Calcular capacidad m√°xima de un cami√≥n (suponiendo que todos tienen la misma capacidad)
        double capacidadMaxCamion = estado.getCamiones().stream()
                .mapToDouble(c -> c.getPlantilla().getCapacidadCarga())   // o getDisponible() si prefieres la disponible inicial
                .max()
                .orElse(0);

        List<Pedido> pedidosAInyectar = new ArrayList<>();
        for (Pedido p : nuevos) {
            double volumenRestante = p.getVolumen();

            if (volumenRestante > capacidadMaxCamion) {
                // üõ†Ô∏è Dividir en sub-pedidos de ‚â§ capacidadMaxCamion
                while (volumenRestante > 0) {
                    double vol = Math.min(capacidadMaxCamion, volumenRestante);
                    int subId = estado.generateUniquePedidoId();
                    Pedido sub = new Pedido(
                            subId,
                            tiempoActual,
                            p.getX(),
                            p.getY(),
                            vol,
                            p.getTiempoLimite()
                    );
                    pedidosAInyectar.add(sub);
                    volumenRestante -= vol;
                }
            } else {
                // cabe entero en un cami√≥n
                pedidosAInyectar.add(p);
            }
        }

        // 5.b) A√±adir realmente los pedidos (reemplazo de los nuevos originales)
        estado.getPedidos().addAll(pedidosAInyectar);

        for (Pedido p : pedidosAInyectar) {
            System.out.printf("üÜï t+%d: Pedido #%d recibido (destino=(%d,%d), vol=%.1fm¬≥, l√≠mite t+%d)%n",
                    tiempoActual, p.getId(), p.getX(), p.getY(), p.getVolumen(), p.getTiempoLimite());
        }
        if (!pedidosAInyectar.isEmpty()) replanificar = true;

        // 6) Comprobar colapso: pedidos vencidos
        Iterator<Pedido> itP = estado.getPedidos().iterator();
        while (itP.hasNext()) {
            Pedido p = itP.next();
            if (!p.isAtendido() && !p.isDescartado() && tiempoActual > p.getTiempoLimite()) {
                System.out.printf("üí• Colapso en t+%d, pedido %d incumplido%n",
                        tiempoActual, p.getId());
                // Marca y elimina para no repetir el colapso
                p.setDescartado(true);
                itP.remove();
            }
        }

        // 7) Aver√≠as por turno (T1, T2, T3)
        String turnoActual = turnoDeMinuto(tiempoActual);
        if (!turnoActual.equals(estado.getTurnoAnterior())) {
            estado.setTurnoAnterior(turnoActual);
            estado.getAveriasAplicadas().clear();
            estado.getCamionesInhabilitados().clear();
        }
        Map<String, String> averiasTurno = estado.getAveriasPorTurno()
                .getOrDefault(turnoActual, Collections.emptyMap());
        for (Map.Entry<String, String> entry : averiasTurno.entrySet()) {
            String key = turnoActual + "_" + entry.getKey();
            if (estado.getAveriasAplicadas().contains(key)) continue;
            CamionEstado c = findCamion(entry.getKey(), estado);
            if (c != null && c.getTiempoLibre() <= tiempoActual) {
                int penal = entry.getValue().equals("T1") ? 30 :
                        entry.getValue().equals("T2") ? 60 : 90;
                c.setTiempoLibre(tiempoActual + penal);
                estado.getAveriasAplicadas().add(key);
                estado.getCamionesInhabilitados().add(c.getPlantilla().getId());
                replanificar = true;
                System.out.printf("üö® t+%d: Cami√≥n %s sufre aver√≠a tipo %s, penal=%d%n",
                        tiempoActual, c.getPlantilla().getId(), entry.getValue(), penal);
            }
        }
        Iterator<String> it = estado.getCamionesInhabilitados().iterator();
        while (it.hasNext()) {
            CamionEstado c = findCamion(it.next(), estado);
            if (c != null && c.getTiempoLibre() <= tiempoActual) {
                it.remove(); replanificar = true;
            }
        }

        // 8) Construir estado ‚Äúligero‚Äù de la flota disponible para ACO
        List<CamionEstado> flotaEstado = estado.getCamiones().stream()
                .filter(c -> c.getStatus() == CamionEstado.TruckStatus.AVAILABLE)
                .map(c -> {
                    CamionEstado est = new CamionEstado(c.getPlantilla(), c.getX(), c.getY());
                    est.setCapacidadDisponible(c.getCapacidadDisponible());
                    est.setTiempoLibre(c.getTiempoLibre());
                    est.setCombustibleDisponible(c.getCombustibleActual());
                    return est;
                })
                .collect(Collectors.toList());

        // 9) Determinar candidatos a replanificar
        Map<Pedido, Integer> entregaActual = new HashMap<>();
        for (EntregaEvent ev : estado.getEventosEntrega()) {
            entregaActual.put(ev.getPedido(), ev.time);
        }
        List<Pedido> pendientes = estado.getPedidos().stream()
                .filter(p -> !p.isAtendido() && !p.isDescartado() && !p.isProgramado() && p.getTiempoCreacion() <= tiempoActual)
                .collect(Collectors.toList());

        List<Pedido> candidatos = new ArrayList<>();
        for (Pedido p : pendientes) {
            if (tiempoActual + 60 >= p.getTiempoLimite()) {
                candidatos.add(p);
                continue;
            }
            Integer tPrev = entregaActual.get(p);
            if (tPrev == null) {
                candidatos.add(p);
            } else {
                int mejorAlt = tPrev;
                for (CamionEstado est : flotaEstado) {
                    if (est.getCapacidadDisponible() < p.getVolumen()) continue;
                    int dt = Math.abs(est.getX() - p.getX()) + Math.abs(est.getY() - p.getY());
                    int llegada = tiempoActual + dt;
                    if (llegada < mejorAlt) mejorAlt = llegada;
                }
                if (mejorAlt < tPrev) candidatos.add(p);
            }
        }
        candidatos.removeIf(p -> {
            Integer entregaMin = entregaActual.get(p);
            return entregaMin != null && entregaMin - tiempoActual <= 1;
        });

        // 10) Replanificaci√≥n ACO si procede
        if (replanificar && !candidatos.isEmpty()) {
            System.out.printf("‚è≤Ô∏è t+%d: Replanificando, candidatos=%s%n",
                    tiempoActual, candidatos.stream().map(Pedido::getId).collect(Collectors.toList()));

            // A) Cancelar eventos de entrega futuros de esos candidatos
            Set<Integer> idsCandidatos = candidatos.stream().map(Pedido::getId).collect(Collectors.toSet());
            estado.getEventosEntrega().removeIf(ev -> idsCandidatos.contains(ev.getPedido().getId()));

            // B) Desprogramar pedidos
            for (Pedido p : candidatos) p.setProgramado(false);

            //  C) Ejecutar ACO
            List<Ruta> rutas = ejecutarACO(candidatos, flotaEstado, tiempoActual, estado);

            System.out.printf("    ‚Üí Rutas devueltas para %s%n",
                    rutas.stream()
                            .flatMap(r -> r.getPedidoIds().stream())        // REVISAR
                            .map(i -> candidatos.get(i).getId())
                            .collect(Collectors.toList()));

            aplicarRutas(tiempoActual, rutas, candidatos, estado);
            estado.setRutas(rutas);
        }
        return estado.getCurrentTime();
    }

    // ------------------------------------------------------------
    // M√©todos privados auxiliares copiados de ACOPlanner original
    // ------------------------------------------------------------
    private boolean esDesvioValido(CamionEstado c, Pedido p, int tiempoActual, ExecutionContext estado) {
        double disponible = c.getCapacidadDisponible();
        int hora = tiempoActual;
        int prevX = c.getX(), prevY = c.getY();

        // ‚Äî Primer tramo: al NUEVO pedido ‚Äî
        List<Point> pathToNew = buildManhattanPath(prevX, prevY, p.getX(), p.getY(), hora, estado);
        if (pathToNew == null) return false;           // imposible alcanzar
        hora += pathToNew.size();                      // 1 paso = 1 minuto
        hora += 15;                                    // +15 min de descarga
        if (hora > p.getTiempoLimite()) return false;
        disponible -= p.getVolumen();
        if (disponible < 0) return false;

        // avanzamos ‚Äúvirtualmente‚Äù a la posici√≥n del pedido
        prevX = p.getX();
        prevY = p.getY();

        // ‚Äî Siguientes tramos: los pedidos ya en rutaPendiente ‚Äî
        for (Pedido orig : c.getPedidosCargados()) {
            List<Point> pathSeg = buildManhattanPath(prevX, prevY, orig.getX(), orig.getY(), hora, estado);
            if (pathSeg == null) return false;         // no hay ruta libre
            hora += pathSeg.size();
            hora += 15;                                // tiempo de servicio
            if (hora > orig.getTiempoLimite()) return false;
            disponible -= orig.getVolumen();
            if (disponible < 0) return false;

            prevX = orig.getX();
            prevY = orig.getY();
        }

        return true;
    }


    private int posicionOptimaDeInsercion(CamionEstado c, Pedido pNuevo, int tiempoActual, ExecutionContext estado) {
        List<Pedido> originales = c.getPedidosCargados();
        int mejorIdx = originales.size();
        int mejorHoraEntrega = Integer.MAX_VALUE;

        // Capacidad y posici√≥n de arranque reales del cami√≥n
        double capacidadOriginal = c.getCapacidadDisponible();
        int x0 = c.getX(), y0 = c.getY();

        // Probar cada posible posici√≥n de inserci√≥n
        for (int idx = 0; idx <= originales.size(); idx++) {
            double disponible = capacidadOriginal;
            int hora = tiempoActual;
            int simX = x0, simY = y0;

            // Montamos la lista de pedidos en el orden de prueba
            List<Pedido> prueba = new ArrayList<>(originales);
            prueba.add(idx, pNuevo);

            boolean valido = true;
            // Recorremos cada segmento (pedido) con ruta real
            for (Pedido q : prueba) {
                // 1) Construir la ruta real (bloqueos-aware) desde (simX,simY) hasta q
                List<Point> path = buildManhattanPath(simX, simY, q.getX(), q.getY(), hora, estado);
                if (path == null) {
                    valido = false;
                    break;
                }
                // 2) Tiempo de viaje = n√∫mero de pasos
                hora += path.size();
                // 3) Tiempo de servicio (descarga)
                hora += 15;
                // 4) Comprobar deadline
                if (hora > q.getTiempoLimite()) {
                    valido = false;
                    break;
                }
                // 5) Restar volumen al disponible
                disponible -= q.getVolumen();
                if (disponible < 0) {
                    valido = false;
                    break;
                }
                // 6) Avanzar ‚Äúvirtual‚Äù a la posici√≥n del pedido
                simX = q.getX();
                simY = q.getY();
            }

            // Si democr√°tico y acaba antes (mejor horaEntrega), guardamos √≠ndice
            if (valido && hora < mejorHoraEntrega) {
                mejorHoraEntrega = hora;
                mejorIdx = idx;
            }
        }

        return mejorIdx;
    }

    private void aplicarRutas(int tiempoActual, List<Ruta> rutas, List<Pedido> activos, ExecutionContext estado) {
        rutas.removeIf(r -> r.getPedidoIds() == null || r.getPedidoIds().isEmpty());

        // A) Filtrar rutas que no caben en la flota real
        for (Iterator<Ruta> itR = rutas.iterator(); itR.hasNext(); ) {
            Ruta r = itR.next();
            CamionEstado real = findCamion(r.getCamionId(), estado);
            double disponible = real.getCapacidadDisponible();
            boolean allFit = true;
            for (int idx : r.getPedidoIds()) {
                if (disponible < activos.get(idx).getVolumen()) {
                    allFit = false;
                    break;
                }
                disponible -= activos.get(idx).getVolumen();
            }
            if (!allFit) {
                System.out.printf("‚ö† t+%d: Ruta descartada para %s (no cabe volumen) ‚Üí %s%n",
                        tiempoActual, real.getPlantilla().getId(),
                        r.getPedidoIds().stream().map(i -> activos.get(i).getId()).collect(Collectors.toList()));
                itR.remove();
            }
        }

        // B) Aplicar cada ruta al estado real
        for (Ruta ruta : rutas) {
            CamionEstado camion = findCamion(ruta.getCamionId(), estado);
            Pedido nuevo = activos.get(ruta.getPedidoIds().get(0));

            // ‚îÄ‚îÄ‚îÄ INSTRUMENTACI√ìN DE LOGS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            boolean condStatus    = camion.getStatus() == CamionEstado.TruckStatus.DELIVERING;
            boolean condValido    = esDesvioValido(camion, nuevo, tiempoActual, estado);
            boolean condCapacidad = camion.getCapacidadDisponible() >= nuevo.getVolumen();
            System.out.printf(
                    "üîç Desv√≠o? Cami√≥n=%s Pedido=%d | status=DELIVERING?%b | esDesv√≠oValido?%b | capSuficiente?%b%n",
                    camion.getPlantilla().getId(),
                    nuevo.getId(),
                    condStatus,
                    condValido,
                    condCapacidad
            );

            if (camion.getStatus() == CamionEstado.TruckStatus.DELIVERING
                    && esDesvioValido(camion, nuevo, tiempoActual, estado)
                    && camion.getCapacidadDisponible() >= nuevo.getVolumen()) {

                int idx = posicionOptimaDeInsercion(camion, nuevo, tiempoActual, estado);
                camion.getPedidosCargados().add(idx, nuevo);
                camion.setCapacidadDisponible(camion.getCapacidadDisponible() - nuevo.getVolumen());
                System.out.printf("üîÄ t+%d: Desv√≠o ‚Äì insertado Pedido #%d en %s en posici√≥n %d%n",
                        tiempoActual, nuevo.getId(), camion.getPlantilla().getId(), idx);

                int cx = camion.getX(), cy = camion.getY();
                List<Point> path = buildManhattanPath(cx, cy, nuevo.getX(), nuevo.getY(), tiempoActual, estado);
                int pasos = path.size();
                //int dist = Math.abs(cx - nuevo.getX()) + Math.abs(cy - nuevo.getY());
                int tViaje = (int) Math.ceil(pasos * (60.0 / 50.0));

                camion.setRuta(path);
                camion.getHistory().addAll(path);
                estado.getEventosEntrega().add(new EntregaEvent(tiempoActual + tViaje, camion.getPlantilla().getId(), nuevo));
                nuevo.setProgramado(true);
                System.out.printf("üïí eventoEntrega programado (desv√≠o) t+%d ‚Üí (%d,%d)%n",
                        tiempoActual + tViaje, nuevo.getX(), nuevo.getY());

            } else {
                // Asignaci√≥n normal
                camion.getPedidosCargados().clear();
                camion.getPedidosCargados().add(nuevo);
                camion.setStatus(CamionEstado.TruckStatus.DELIVERING);

                int cx = camion.getX(), cy = camion.getY();
                for (int pedidoIdx : ruta.getPedidoIds()) {
                    Pedido p = activos.get(pedidoIdx);
                    if (camion.getCapacidadDisponible() < p.getVolumen()) {
                        System.out.printf("‚ö† t+%d: Cami√≥n %s sin espacio para Pedido #%d%n",
                                tiempoActual, camion.getPlantilla().getId(), p.getId());
                        continue;
                    }
                    System.out.printf("‚è±Ô∏è t+%d: Asignando Pedido #%d al Cami√≥n %s%n (%d,%d)",
                            tiempoActual, p.getId(), camion.getPlantilla().getId(), p.getX(), p.getY());

                    List<Point> path = buildManhattanPath(cx, cy, p.getX(), p.getY(), tiempoActual, estado);
                    int dist = path.size();
                    int tViaje = (int) Math.ceil(dist * (60.0 / 50.0));

                    camion.setRuta(path);
                    camion.setPasoActual(0);
                    camion.getHistory().addAll(path);
                    p.setProgramado(true);

                    estado.getEventosEntrega().add(new EntregaEvent(
                            tiempoActual + tViaje, camion.getPlantilla().getId(), p
                    ));
                    System.out.printf("üïí eventoEntrega programado t+%d ‚Üí (%d,%d)%n",
                            tiempoActual + tViaje, p.getX(), p.getY());
                    Point last = path.get(path.size() - 1);
                    // camion.setX(p.getX());
                    // camion.setY(p.getY());
                    cx = last.x;; cy = last.y;
                }
            }
        }
    }

    // ------------------------------------------------------------
    // 14) Conversor turno a partir de minuto (‚ÄúT1‚Äù|‚ÄúT2‚Äù|‚ÄúT3‚Äù)
    // ------------------------------------------------------------
    private String turnoDeMinuto(int t) {
        int mod = t % 1440;
        if (mod < 480) return "T1";      // 00:00‚Äì07:59
        else if (mod < 960) return "T2"; // 08:00‚Äì15:59
        else return "T3";                // 16:00‚Äì23:59
    }